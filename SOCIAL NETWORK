import networkx as nx
import matplotlib.pyplot as plt
# Create an empty graph object
G = nx.Graph()
# Add nodes (people)
G.add_node("Alice")
G.add_node("Bob")
G.add_node("Charlie")
G.add_node("David")
G.add_node("Eve")
# Add edges (relationships between people)
G.add_edge("Alice", "Bob") # Alice is friends with Bob
G.add_edge("Alice", "Charlie") # Alice is friends with Charlie
G.add_edge("Bob", "David") # Bob is friends with David
G.add_edge("Charlie", "David") # Charlie is friends with David
G.add_edge("David", "Eve") # David is friends with Eve
# Visualize the network
plt.figure(figsize=(8, 6))
nx.draw(G, with_labels=True, node_color='lightblue', font_weight='bold', node_size=2000,
font_size=12)
plt.title("Social Network Graph")
plt.show()
# Degree centrality (how connected a person is)
degree_centrality = nx.degree_centrality(G)
print("Degree Centrality:", degree_centrality)
# Betweenness centrality (how much a person acts as a bridge between others)
betweenness_centrality = nx.betweenness_centrality(G)
print("Betweenness Centrality:", betweenness_centrality)
# Closeness centrality (how close a person is to everyone else in the network)
closeness_centrality = nx.closeness_centrality(G)
print("Closeness Centrality:", closeness_centrality)
# Clustering coefficient (measuring the degree to which nodes in a graph tend to cluster
together)
clustering_coefficient = nx.clustering(G)
print("Clustering Coefficient:", clustering_coefficient)
# Find connected components (groups of people who are directly or indirectly connected)
connected_components = list(nx.connected_components(G))
print("Connected Components:", connected_components)
